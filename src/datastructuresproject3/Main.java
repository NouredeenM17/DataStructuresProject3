package datastructuresproject3;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @authors Nouredeen Ahmed Mahmoud Ali HAMMAD
 *          Vildan KAVAKLI
 */
public class Main extends javax.swing.JFrame {

    // Declares userRecords map to store user data
    private Map<Position, Integer> userRecords;
    // Declares movieRecords map to store movie data
    private Map<Integer, Movie> movieRecords;
    // Declares mainDataFile, targetUserFile, and moviesFile as File objects
    private File mainDataFile, targetUserFile, moviesFile;

    /**
     * Creates new form Main
     * @throws java.io.IOException
     */
    public Main() throws IOException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        targetPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comboTargetUser = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnGetTargetRecom = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        targetTable = new javax.swing.JTable();
        spinnerTargetX = new javax.swing.JSpinner();
        spinnerTargetK = new javax.swing.JSpinner();
        moviesPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        moviesTable = new javax.swing.JTable();
        spinnerMoviesX = new javax.swing.JSpinner();
        spinnerMoviesK = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        comboFilm2 = new javax.swing.JComboBox<>();
        spinner2 = new javax.swing.JSpinner();
        comboFilm3 = new javax.swing.JComboBox<>();
        spinner3 = new javax.swing.JSpinner();
        comboFilm4 = new javax.swing.JComboBox<>();
        spinner4 = new javax.swing.JSpinner();
        comboFilm5 = new javax.swing.JComboBox<>();
        spinner1 = new javax.swing.JSpinner();
        spinner5 = new javax.swing.JSpinner();
        comboFilm1 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        btnGetMovieRecom = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBorder(new javax.swing.border.MatteBorder(null));

        targetPanel.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Target User:");
        jLabel1.setToolTipText("");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        comboTargetUser.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        comboTargetUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("X: ");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("K: ");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnGetTargetRecom.setBackground(new java.awt.Color(204, 204, 204));
        btnGetTargetRecom.setText("Get Recommendations");
        btnGetTargetRecom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnGetTargetRecom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetTargetRecomActionPerformed(evt);
            }
        });

        targetTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Genres"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(targetTable);
        if (targetTable.getColumnModel().getColumnCount() > 0) {
            targetTable.getColumnModel().getColumn(0).setMaxWidth(200);
        }

        javax.swing.GroupLayout targetPanelLayout = new javax.swing.GroupLayout(targetPanel);
        targetPanel.setLayout(targetPanelLayout);
        targetPanelLayout.setHorizontalGroup(
            targetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(targetPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(targetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(targetPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(comboTargetUser, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spinnerTargetX, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spinnerTargetK, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnGetTargetRecom, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        targetPanelLayout.setVerticalGroup(
            targetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(targetPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(targetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(btnGetTargetRecom, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerTargetK)
                    .addComponent(spinnerTargetX)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboTargetUser, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Target User", targetPanel);

        moviesPanel.setBackground(java.awt.Color.lightGray);

        jLabel4.setText("X:");

        jLabel5.setText("K: ");

        moviesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Genres"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(moviesTable);
        if (moviesTable.getColumnModel().getColumnCount() > 0) {
            moviesTable.getColumnModel().getColumn(0).setMaxWidth(200);
        }

        spinnerMoviesX.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        spinnerMoviesX.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        spinnerMoviesK.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        spinnerMoviesK.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setMaximumSize(new java.awt.Dimension(300, 144));

        comboFilm2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        comboFilm2.setMaximumSize(new java.awt.Dimension(300, 32767));

        comboFilm3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        comboFilm3.setMaximumSize(new java.awt.Dimension(300, 32767));

        comboFilm4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        comboFilm4.setMaximumSize(new java.awt.Dimension(300, 32767));

        comboFilm5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        comboFilm5.setMaximumSize(new java.awt.Dimension(300, 32767));

        comboFilm1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));
        comboFilm1.setMaximumSize(new java.awt.Dimension(300, 32767));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboFilm5, javax.swing.GroupLayout.Alignment.TRAILING, 0, 98, Short.MAX_VALUE)
                    .addComponent(comboFilm4, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboFilm2, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboFilm3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboFilm1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spinner3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboFilm1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFilm2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFilm3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFilm4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFilm5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        btnGetMovieRecom.setBackground(new java.awt.Color(204, 204, 204));
        btnGetMovieRecom.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnGetMovieRecom.setForeground(new java.awt.Color(51, 51, 51));
        btnGetMovieRecom.setText("Get Recommendations");
        btnGetMovieRecom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnGetMovieRecom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetMovieRecomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout moviesPanelLayout = new javax.swing.GroupLayout(moviesPanel);
        moviesPanel.setLayout(moviesPanelLayout);
        moviesPanelLayout.setHorizontalGroup(
            moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moviesPanelLayout.createSequentialGroup()
                .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(moviesPanelLayout.createSequentialGroup()
                        .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(moviesPanelLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spinnerMoviesX, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spinnerMoviesK, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(79, 79, 79))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, moviesPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnGetMovieRecom)
                                .addGap(18, 18, 18)))
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(194, 194, 194)
                        .addComponent(jLabel6))
                    .addGroup(moviesPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        moviesPanelLayout.setVerticalGroup(
            moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moviesPanelLayout.createSequentialGroup()
                .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(moviesPanelLayout.createSequentialGroup()
                        .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(moviesPanelLayout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spinnerMoviesX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(moviesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(spinnerMoviesK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(moviesPanelLayout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnGetMovieRecom, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(moviesPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Movies", moviesPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetTargetRecomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetTargetRecomActionPerformed
        // Gets the value of x and k from their respective spinners
        int x = (int) spinnerTargetX.getValue();
        int k = (int) spinnerTargetK.getValue();

        // Checks if the product of x and k exceeds the number of movies
        if (x * k > 5401) {
            // Shows an error message and returns the function
            JOptionPane.showMessageDialog(null, "The product of x and k cannot exceed "
                    + "the number of movies (5401). Please choose smaller values!");
            return;
        }

        // Splits the selected item from comboTargetUser to extract the target user ID
        String[] split = ("" + comboTargetUser.getSelectedItem()).split(" ");
        int targetUserID = Integer.parseInt(split[1]);

        // Gets the recommendation data as a 2D array for the target user ID, x, and k
        String[][] data = getRecommendationData(targetUserID, x, k);

        // Creates a table model with the recommendation data and headers
        String[] headers = {"ID", "Title", "Genres"};
        DefaultTableModel tableModel = new DefaultTableModel(data, headers);
        
        // Sets the table model for the targetTable
        targetTable.setModel(tableModel);
        
        // Reduces the width of the first column in the table (the column with the movie ID)
        targetTable.getColumnModel().getColumn(0).setMaxWidth(200);

    }//GEN-LAST:event_btnGetTargetRecomActionPerformed

    private void btnGetMovieRecomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetMovieRecomActionPerformed
        // Gets the value of x and k from their respective spinners
        int x = (int) spinnerMoviesX.getValue();
        int k = (int) spinnerMoviesK.getValue();

        // Checks if the product of x and k exceeds the number of movies
        if (x * k > 5401) {
            // Shows an error message and returns the function
            JOptionPane.showMessageDialog(null, "The product of x and k cannot exceed"
                    + " the number of movies. Please choose smaller values!");
            return;
        }

        // Creates an ArrayList to store the selected movies from the combo boxes
        ArrayList<Movie> comboMovies = new ArrayList<>();
        comboMovies.add((Movie) comboFilm1.getSelectedItem());
        comboMovies.add((Movie) comboFilm2.getSelectedItem());
        comboMovies.add((Movie) comboFilm3.getSelectedItem());
        comboMovies.add((Movie) comboFilm4.getSelectedItem());
        comboMovies.add((Movie) comboFilm5.getSelectedItem());

        // Creates an ArrayList to store the spinner values
        ArrayList<Integer> spinnerValues = new ArrayList<>();
        spinnerValues.add((int) spinner1.getValue());
        spinnerValues.add((int) spinner2.getValue());
        spinnerValues.add((int) spinner3.getValue());
        spinnerValues.add((int) spinner4.getValue());
        spinnerValues.add((int) spinner5.getValue());

        // Adds a dummy user with ID = 10000 to the userRecords and adds rating 
        // data to their row according to the selected films' IDs and the rating 
        // values from the corresponding spinner
        for (int i = 0; i < 5; i++) {
            userRecords.put(new Position(10000, comboMovies.get(i).getId()), spinnerValues.get(i));
        }

        // Get the recommendation data as a 2D array for the dummy user with ID = 10000, x, and k
        String[][] data = getRecommendationData(10000, x, k);

        // Removes the dummy user records added earlier
        for (int i = 0; i < 5; i++) {
            userRecords.remove(new Position(10000, comboMovies.get(i).getId()));
        }

        // Creates a table model with the recommendation data and headers
        String[] headers = {"ID", "Title", "Genres"};
        DefaultTableModel tableModel = new DefaultTableModel(data, headers); // Create a table model with the recommendation data and headers
        
        // Sets the table model for the moviesTable
        moviesTable.setModel(tableModel);
        
        // Reduces the width of the first column in the table (the column with the movie ID)
        moviesTable.getColumnModel().getColumn(0).setMaxWidth(200);

    }//GEN-LAST:event_btnGetMovieRecomActionPerformed

    void initFrame() throws FileNotFoundException, IOException {
        // Gets the current directory
        File directory = new File(System.getProperty("user.dir"));
        
        // Gets the 3 CSV files using their path
        mainDataFile = new File(directory.getAbsolutePath() + "\\src\\datastructuresproject3\\" + "main_data.csv");
        targetUserFile = new File(directory.getAbsolutePath() + "\\src\\datastructuresproject3\\" + "target_user.csv");
        moviesFile = new File(directory.getAbsolutePath() + "\\src\\datastructuresproject3\\" + "movies.csv");

        // Checks if any of the data files could not be retrieved (are null)
        if (!mainDataFile.exists() || !targetUserFile.exists() || !moviesFile.exists()) {
            
            // Prompts user to select the 3 files with a JFileChooser window
            mainDataFile = Utility.getFile("Open the main_data.csv file");
            targetUserFile = Utility.getFile("Open the target_user.csv file");
            moviesFile = Utility.getFile("Open the movies.csv file");

            // Display an error message if any of the files were not selected
            if (mainDataFile == null || targetUserFile == null || moviesFile == null) {
                JOptionPane.showMessageDialog(null, "Error: You must select all 3 files. Please restart the program.");
                return;
            }
        }

        // Sets up the userRecords hashmap
        setUpUserMap();
        
        // Sets up the movieRecords hashmap
        setUpMovies();
        
        // Sets up the string values in the target user combo box
        setUpTargetUserCombobox();
        
        // Sets up the spinner models (min and max values)
        setUpSpinners();
        
        // Sets up the 50 random movies and puts 10 in each combo box
        setUpMoviesCombobox();
    }

    // Takes a user ID, x and k values, compares cosine similarity between that
    // user and all other users, gets the most similar x users and retrieves their
    // highest rated k movies then returns this data in a string 2D array
    String[][] getRecommendationData(int targetId, int x, int k) {
        MaxHeap<UserSimilarity> heap = new MaxHeap<>(700);

        // Calculates the cosine similarity between target user and all other users
        // then inserts them into a max-heap (as UserSimilarity objects)
        for (int i = 1; i <= 600; i++) {
            heap.insert(Utility.cosineSimilarity(userRecords, targetId, i));
        }

        // Finds the x most similar users to the target user
        UserSimilarity[] mostSimilarUsers = new UserSimilarity[x];
        for (int i = 0; i < x; i++) {
            mostSimilarUsers[i] = heap.deleteMax();
        }

        // Gets the k highest-rated movies from each of the most similar users
        ArrayList<Integer> movieIdRecom = new ArrayList<>();
        for (UserSimilarity us : mostSimilarUsers) {
            // Appends all the k highest-rated from each user to the movieIdRecom array
            movieIdRecom.addAll(getHighestRatedMoviesOfUser(us.userId, k));
        }

        // Retrieves movie objects based on their IDs
        ArrayList<Movie> movieObjRecom = new ArrayList<>();
        for (int id : movieIdRecom) {
            movieObjRecom.add(movieRecords.get(id));
        }

        // Converts the movie objects to a 2D array to view on the JTable
        String[][] data = new String[movieObjRecom.size()][3];
        for (int i = 0; i < movieObjRecom.size(); i++) {
            Movie current = movieObjRecom.get(i);
            data[i][0] = "" + current.getId();
            data[i][1] = current.getTitle();
            data[i][2] = current.getGenres();
        }

        return data;
    }

    // Gets k highest-rated movies from the given user ID and returns an ArrayList<Movie> object
    ArrayList<Integer> getHighestRatedMoviesOfUser(int userId, int k) {
        
        ArrayList<Integer> result = new ArrayList<>();
        
        // Iterates over the movie ratings for the given user ID
        for (int i = 1; i <= 9018; i++) {
            // Checks if the rating for the current movie is null and skips to the next iteration if it is
            if (userRecords.get(new Position(userId, i)) == null) {
                continue;
            }
            int rating = userRecords.get(new Position(userId, i));
            // Checks if the rating is 5 and adds it to the result if it is
            if (rating == 5) {
                result.add(i);
            }
            // Checks if the wanted number of recommendations (k) is reached
            if (result.size() >= k) {
                // Returns the result
                return result;
            }
        }
        // Repeat the above process for ratings 4, 3, 2, and 1
        
        // Checks ratings of 4
        for (int i = 1; i <= 9018; i++) {
            if (userRecords.get(new Position(userId, i)) == null) {
                continue;
            }
            int rating = userRecords.get(new Position(userId, i));
            if (rating == 4) {
                result.add(i);
            }
            if (result.size() >= k) {
                return result;
            }
        }

        // Checks ratings of 3
        for (int i = 1; i <= 9018; i++) {
            if (userRecords.get(new Position(userId, i)) == null) {
                continue;
            }

            int rating = userRecords.get(new Position(userId, i));
            if (rating == 3) {
                result.add(i);
            }
            if (result.size() >= k) {
                return result;
            }
        }

        // Checks ratings of 2
        for (int i = 1; i <= 9018; i++) {
            if (userRecords.get(new Position(userId, i)) == null) {
                continue;
            }

            int rating = userRecords.get(new Position(userId, i));
            if (rating == 2) {
                result.add(i);
            }
            if (result.size() >= k) {
                return result;
            }
        }

        // Checks ratings of 1
        for (int i = 1; i <= 9018; i++) {
            if (userRecords.get(new Position(userId, i)) == null) {
                continue;
            }

            int rating = userRecords.get(new Position(userId, i));
            if (rating == 1) {
                result.add(i);
            }
            if (result.size() >= k) {
                return result;
            }
        }

        // Returns result when the k number is not fulfilled
        return result;
    }

    void setUpSpinners() {
        // Sets up spinner models for spinner1, spinner2, spinner3, spinner4, and spinner5
        // They have a minimum value of 1 and a maximum of 5 (used for ratings)
        SpinnerModel spinner1Model = new SpinnerNumberModel(1, 1, 5, 1);
        SpinnerModel spinner2Model = new SpinnerNumberModel(1, 1, 5, 1);
        SpinnerModel spinner3Model = new SpinnerNumberModel(1, 1, 5, 1);
        SpinnerModel spinner4Model = new SpinnerNumberModel(1, 1, 5, 1);
        SpinnerModel spinner5Model = new SpinnerNumberModel(1, 1, 5, 1);

        // Sets up spinner models for spinnerTargetX and spinnerMoviesX
        // They have a minimum value of 1 and a maximum of 600 (the number of users)
        SpinnerModel xTargetSpinnerModel = new SpinnerNumberModel(1, 1, 600, 1);
        SpinnerModel xMoviesSpinnerModel = new SpinnerNumberModel(1, 1, 600, 1);

        // Sets up spinner models for spinnerTargetK and spinnerMoviesK
        // They have a minimum value of 1 and a maximum of 5401 (the number of movies)
        SpinnerModel kTargetSpinnerModel = new SpinnerNumberModel(1, 1, 5401, 1);
        SpinnerModel kMoviesSpinnerModel = new SpinnerNumberModel(1, 1, 5401, 1);

        // Assigns the spinner models to the respective spinners
        spinner1.setModel(spinner1Model);
        spinner2.setModel(spinner2Model);
        spinner3.setModel(spinner3Model);
        spinner4.setModel(spinner4Model);
        spinner5.setModel(spinner5Model);

        spinnerTargetX.setModel(xTargetSpinnerModel);
        spinnerMoviesX.setModel(xMoviesSpinnerModel);

        spinnerTargetK.setModel(kTargetSpinnerModel);
        spinnerMoviesK.setModel(kMoviesSpinnerModel);
    }

    // Reads mainDataFile and targetUserFile and put them both in the userRecords hashmap
    void setUpUserMap() throws FileNotFoundException, IOException {

        // Initializes the userRecords hashmap
        userRecords = new HashMap<>();

        // Reads mainDataFile
        BufferedReader br = new BufferedReader(new FileReader(mainDataFile));
        int row = 1;
        String line;
        
        // Skips the header line
        br.readLine();
        while ((line = br.readLine()) != null) {
            // Splits all column values
            String[] values = line.split(",");
            
            // Iterates over all columns
            for (int col = 1; col < values.length; col++) {
                int value = Integer.parseInt(values[col]);
                if (value != 0) {
                    // Add the user rating to the userRecords hashmap
                    userRecords.put(new Position(row, col), value);
                }
            }
            row++;
        }
        
        // Reads targerUserFile
        br = new BufferedReader(new FileReader(targetUserFile));
        row = 1;
        
        // Skips the header line
        br.readLine();
        while ((line = br.readLine()) != null) {
            // Splits all column values
            String[] values = line.split(",");
            
            // Iterates over all columns
            for (int col = 1; col < values.length; col++) {
                int value = Integer.parseInt(values[col]);
                if (value != 0) {
                    // Add the user rating to the userRecords hashmap
                    userRecords.put(new Position(row + 600, col), value);
                }
            }
            row++;
        }
    }

    // Reads moviesFile and put it in the movieRecords hashmap
    void setUpMovies() throws FileNotFoundException, IOException {
        // Reads targerUserFile
        BufferedReader br = new BufferedReader(new FileReader(moviesFile));
        
        // Initializes the movieRecords hashmap
        movieRecords = new HashMap<>();
        
        // Skips the header line
        br.readLine();
        String line;

        while ((line = br.readLine()) != null) {
            // Splits the line by commas
            String[] split = line.split(",");
            String title = "";

            // Concatenates the movie title from the split array elements
            // (This is to concatenate titles that contain a comma)
            for (int j = 1; j < split.length - 1; j++) {
                title += split[j];
            }

            // Extracts the movie ID from the first element
            int movieId = Integer.parseInt(split[0]);
            // Extract the genre from the last element
            String genre = split[split.length - 1];

            // Creates a new Movie object and add it to the movieRecords hashmap
            movieRecords.put(movieId, new Movie(movieId, title, genre));
        }
    }

    // Fills up the target combo box with IDs between 601 and 610
    void setUpTargetUserCombobox() {
        for (int i = 601; i <= 610; i++) {
            comboTargetUser.addItem("ID: " + i);
        }
    }

    // Returns a random movie
    Movie getRandomMovie() {
        // Generates a random number between 1 and 9018
        int rand = (int) (Math.random() * 9018 + 1);
        
        // If the movie with the generated ID doesn't exist, generates a new random number
        while (movieRecords.get(rand) == null) {
            rand = (int) (Math.random() * 9018 + 1);
        }
        // Return the randomly selected Movie object
        return movieRecords.get(rand);
    }

    // Checks if a given Movie is in the given ArrayList<Movie> object
    boolean movieIsInArray(Movie movie, ArrayList<Movie> arr) {
        boolean isInArray = false;

        for (int i = 0; i < arr.size(); i++) {
            // Checks if the Movie object at index i in the array has the same ID as the given movie
            if (arr.get(i).getId() == movie.getId()) {
                
                // Set isInArray to true if a matching movie is found
                isInArray = true;
            }
        }

        return isInArray;
    }

    // Sets up the 50 random movies to choose from (10 for each combo box)
    void setUpMoviesCombobox() {

        ArrayList<Movie> movieArr = new ArrayList<>();
        while (movieArr.size() != 50) {
            // Gets a random movie
            Movie newMovie = getRandomMovie();
            
            // Checks if the movie is not already in the array
            if (!movieIsInArray(newMovie, movieArr)) {
                // Adds the movie to the array
                movieArr.add(newMovie);
            }
        }

        // Defines a Movie array for each combo box
        Movie[] c1 = new Movie[10];
        Movie[] c2 = new Movie[10];
        Movie[] c3 = new Movie[10];
        Movie[] c4 = new Movie[10];
        Movie[] c5 = new Movie[10];

        // Fills the c1 movie array with 10 movies from the movieArr
        for (int i = 0; i < 10; i++) {
            // Get the first movie from the movieArr and assign it to c1
            c1[i] = movieArr.get(0);
            // Remove the movie from movieArr
            movieArr.remove(0);
        }
        // Repeat the above steps for c2, c3, c4, c5
        for (int i = 0; i < 10; i++) {
            c2[i] = movieArr.get(0);
            movieArr.remove(0);
        }
        for (int i = 0; i < 10; i++) {
            c3[i] = movieArr.get(0);
            movieArr.remove(0);
        }
        for (int i = 0; i < 10; i++) {
            c4[i] = movieArr.get(0);
            movieArr.remove(0);
        }
        for (int i = 0; i < 10; i++) {
            c5[i] = movieArr.get(0);
            movieArr.remove(0);
        }

        // Creates combo box models and assigns each movie array to the corresponding combo box
        DefaultComboBoxModel<Movie> comboModel1 = new DefaultComboBoxModel<>(c1);
        DefaultComboBoxModel<Movie> comboModel2 = new DefaultComboBoxModel<>(c2);
        DefaultComboBoxModel<Movie> comboModel3 = new DefaultComboBoxModel<>(c3);
        DefaultComboBoxModel<Movie> comboModel4 = new DefaultComboBoxModel<>(c4);
        DefaultComboBoxModel<Movie> comboModel5 = new DefaultComboBoxModel<>(c5);

        // Sets the combo box models for each combo box
        comboFilm1.setModel(comboModel1);
        comboFilm2.setModel(comboModel2);
        comboFilm3.setModel(comboModel3);
        comboFilm4.setModel(comboModel4);
        comboFilm5.setModel(comboModel5);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    Main f = new Main();
                    f.setLocationRelativeTo(null);
                    f.setResizable(false);
                    
                    // Initializes frame elements and reads CSV data
                    f.initFrame();
                    
                    f.setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGetMovieRecom;
    private javax.swing.JButton btnGetTargetRecom;
    private javax.swing.JComboBox<Movie> comboFilm1;
    private javax.swing.JComboBox<Movie> comboFilm2;
    private javax.swing.JComboBox<Movie> comboFilm3;
    private javax.swing.JComboBox<Movie> comboFilm4;
    private javax.swing.JComboBox<Movie> comboFilm5;
    private javax.swing.JComboBox<String> comboTargetUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel moviesPanel;
    private javax.swing.JTable moviesTable;
    private javax.swing.JSpinner spinner1;
    private javax.swing.JSpinner spinner2;
    private javax.swing.JSpinner spinner3;
    private javax.swing.JSpinner spinner4;
    private javax.swing.JSpinner spinner5;
    private javax.swing.JSpinner spinnerMoviesK;
    private javax.swing.JSpinner spinnerMoviesX;
    private javax.swing.JSpinner spinnerTargetK;
    private javax.swing.JSpinner spinnerTargetX;
    private javax.swing.JPanel targetPanel;
    private javax.swing.JTable targetTable;
    // End of variables declaration//GEN-END:variables
}
